import json
import os
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import torch
from torch.utils.data import Dataset

from evaluation.eval_utils import get_seg_bbox
from utils.plot import transparent_cmap


def get_train_val_paths(img_paths, split_json_path):
    """
    Given a splits json file (generated by nnUNet data preprocess),
    split a list of img_paths (patches) into train and val
    """
    with open(split_json_path) as f:
        splits = json.load(f)

    fold = 0
    train_names = splits[fold]['train']
    val_names = splits[fold]['val']

    train_img_paths = []
    val_img_paths = []
    for x in img_paths:
        # remove _patch suffix in the filenames
        name = x.stem.split("_patch")[0]
        if name in train_names:
            train_img_paths.append(x)
        elif name in val_names:
            val_img_paths.append(x)

    return train_img_paths, val_img_paths


def visualize_data(img, seg, z_slice):
    x, y, z = img, seg, z_slice
    _, axes = plt.subplots(1, 3, figsize=(9, 3))
    axes[0].imshow(x[0][z], cmap="gray")
    axes[1].imshow(x[0][z], cmap="gray")
    axes[1].imshow(y[0][z], cmap=transparent_cmap("r"), alpha=0.7)
    axes[2].imshow(x[0].mean(dim=1), cmap="gray", aspect="auto")
    axes[2].imshow(y[0].mean(dim=1), cmap=transparent_cmap("r"), alpha=0.7)

    for ax in axes:
        ax.grid(False)
        ax.axis('off')


class PatchDataset(Dataset):
    def __init__(self, img_paths, mask_paths):
        self.img_paths = img_paths
        self.mask_paths = mask_paths

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path = self.img_paths[idx]
        seg_path = self.mask_paths[idx]

        image_name = Path(img_path).stem

        img_tensor = torch.load(img_path, weights_only=True)
        seg_tensor = torch.load(seg_path, weights_only=True)

        return {
            "name": str(image_name),
            "img": img_tensor,
            "seg": seg_tensor,
        }
